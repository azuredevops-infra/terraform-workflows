name: "Azure Terraform Authentication - Emergency Mode"
description: "Emergency authentication bypassing service principal secrets"

inputs:
  ARM_TENANT_ID:
    description: "Azure Tenant ID"
    required: true
  ARM_SUBSCRIPTION_ID:
    description: "Azure Subscription ID"
    required: true
  terraform__version:
    description: "Terraform version"
    default: '1.6.6'
    
runs:
  using: composite
  steps:
    - name: Emergency Authentication Setup
      shell: bash
      run: |
        echo "üö® EMERGENCY MODE: Bypassing service principal authentication"
        echo "üîß Attempting alternative authentication methods..."
        
        # Check if Azure CLI is available
        if ! command -v az &> /dev/null; then
          echo "Installing Azure CLI..."
          curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
        fi
        
        echo "‚úÖ Azure CLI available"
        az version

    - name: Try Environment-based Authentication
      shell: bash
      run: |
        echo "üîç Checking for available authentication methods..."
        
        # Method 1: Try managed identity (if available)
        echo "Attempting managed identity authentication..."
        if az login --identity --output none 2>/dev/null; then
          echo "‚úÖ Managed identity authentication successful"
          echo "AUTH_METHOD=managed_identity" >> $GITHUB_ENV
        else
          echo "‚ö†Ô∏è Managed identity not available"
          
          # Method 2: Try service connection
          echo "Attempting service connection..."
          if az account show --output none 2>/dev/null; then
            echo "‚úÖ Existing Azure session found"
            echo "AUTH_METHOD=existing_session" >> $GITHUB_ENV
          else
            echo "‚ùå No active authentication found"
            echo "üîÑ Will proceed with environment variables only"
            echo "AUTH_METHOD=environment_only" >> $GITHUB_ENV
          fi
        fi

    - name: Set Subscription Context
      shell: bash
      run: |
        echo "üéØ Setting Azure subscription context..."
        
        if [ "$AUTH_METHOD" != "environment_only" ]; then
          az account set --subscription ${{ inputs.ARM_SUBSCRIPTION_ID }}
          az account show
        fi
        
        echo "‚úÖ Subscription context set"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform__version }}

    - name: Set Terraform Environment Variables
      shell: bash
      run: |
        echo "üîß Setting Terraform environment variables..."
        
        case "$AUTH_METHOD" in
          "managed_identity"|"existing_session")
            echo "ARM_TENANT_ID=${{ inputs.ARM_TENANT_ID }}" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{ inputs.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "ARM_USE_CLI=true" >> $GITHUB_ENV
            ;;
          "environment_only")
            echo "ARM_TENANT_ID=${{ inputs.ARM_TENANT_ID }}" >> $GITHUB_ENV
            echo "ARM_SUBSCRIPTION_ID=${{ inputs.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
            echo "ARM_USE_CLI=true" >> $GITHUB_ENV
            echo "ARM_SKIP_PROVIDER_REGISTRATION=true" >> $GITHUB_ENV
            ;;
        esac
        
        echo "‚úÖ Terraform environment configured with method: $AUTH_METHOD"

    - name: Verify Access
      shell: bash
      run: |
        echo "üîç Verifying Azure access..."
        
        if [ "$AUTH_METHOD" != "environment_only" ]; then
          # Test basic access
          az account show || echo "‚ö†Ô∏è Azure account access limited"
          
          # Test resource group access
          az group show --name oorja-dev-rg || echo "‚ö†Ô∏è Resource group access limited"
        else
          echo "‚ö†Ô∏è Running in environment-only mode - limited verification"
        fi
        
        echo "‚úÖ Access verification completed"
