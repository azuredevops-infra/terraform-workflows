name: "Azure Terraform Authentication"
description: |
  Centralized authentication for Azure with OIDC support and Azure Key Vault integration.
  Supports local backend (no HCP cloud dependency).

inputs:
  # Azure OIDC Configuration
  azure__client-id:
    description: "Azure Client ID for OIDC authentication"
    required: false
  azure__tenant-id:
    description: "Azure Tenant ID for OIDC authentication"  
    required: false
  azure__subscription-id:
    description: "Azure Subscription ID for OIDC authentication"
    required: false
  
  # Legacy Support
  ARM_CLIENT_ID:
    description: "Azure Client ID for service principal"
    required: false
  ARM_CLIENT_SECRET:
    description: "Azure Client Secret for service principal"
    required: false
  ARM_TENANT_ID:
    description: "Azure Tenant ID"
    required: false
  ARM_SUBSCRIPTION_ID:
    description: "Azure Subscription ID"
    required: false
  
  # Terraform Configuration
  terraform__version:
    description: "Terraform version to install"
    default: '1.6.6'
    
runs:
  using: composite
  steps:
    - name: Validate Azure Credentials
      shell: bash
      run: |
        echo "🔍 Validating Azure credentials..."
        
        if [ -n "${{ inputs.azure__client-id }}" ]; then
          echo "✅ Using OIDC authentication"
          echo "Client ID: ${{ inputs.azure__client-id }}"
          echo "Tenant ID: ${{ inputs.azure__tenant-id }}"
          echo "Subscription ID: ${{ inputs.azure__subscription-id }}"
        elif [ -n "${{ inputs.ARM_CLIENT_ID }}" ]; then
          echo "✅ Using Service Principal authentication"
          echo "Client ID: ${{ inputs.ARM_CLIENT_ID }}"
          echo "Tenant ID: ${{ inputs.ARM_TENANT_ID }}"
          echo "Subscription ID: ${{ inputs.ARM_SUBSCRIPTION_ID }}"
          
          # Validate secret format
          SECRET="${{ inputs.ARM_CLIENT_SECRET }}"
          if [ ${#SECRET} -lt 10 ]; then
            echo "❌ Client secret appears to be too short"
            exit 1
          fi
          
          if [[ ! "$SECRET" =~ ^[A-Za-z0-9~._-]+$ ]]; then
            echo "❌ Client secret contains invalid characters"
            exit 1
          fi
          
          echo "✅ Client secret format appears valid"
        else
          echo "❌ No Azure credentials provided"
          exit 1
        fi

    - name: Configure Azure Credentials (OIDC)
      if: ${{ inputs.azure__client-id != '' && inputs.azure__tenant-id != '' }}
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.azure__client-id }}
        tenant-id: ${{ inputs.azure__tenant-id }}
        subscription-id: ${{ inputs.azure__subscription-id }}
        enable-AzPSSession: true

    - name: Configure Azure Credentials (Service Principal)
      if: ${{ inputs.ARM_CLIENT_ID != '' && inputs.ARM_CLIENT_SECRET != '' }}
      uses: azure/login@v2
      with:
        creds: '{"clientId":"${{ inputs.ARM_CLIENT_ID }}","clientSecret":"${{ inputs.ARM_CLIENT_SECRET }}","subscriptionId":"${{ inputs.ARM_SUBSCRIPTION_ID }}","tenantId":"${{ inputs.ARM_TENANT_ID }}"}'
        enable-AzPSSession: true

    - name: Verify Azure Access
      shell: bash
      run: |
        echo "🔍 Verifying Azure access..."
        
        # Test Azure CLI access
        az account show
        
        # Verify subscription access
        az account set --subscription ${{ inputs.ARM_SUBSCRIPTION_ID || inputs.azure__subscription-id }}
        
        echo "✅ Azure authentication successful"

    - name: Setup Terraform (Local Backend)
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.terraform__version }}

    - name: Install Azure CLI Extensions
      shell: bash
      run: |
        echo "📦 Installing Azure CLI extensions..."
        az extension add --name application-gateway --only-show-errors || true
        az extension add --name aks-preview --only-show-errors || true
        echo "✅ Extensions installed"
        
    - name: Set Azure Environment Variables
      shell: bash
      run: |
        if [ -n "${{ inputs.azure__client-id }}" ]; then
          echo "ARM_CLIENT_ID=${{ inputs.azure__client-id }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ inputs.azure__tenant-id }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ inputs.azure__subscription-id }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV
        elif [ -n "${{ inputs.ARM_CLIENT_ID }}" ]; then
          echo "ARM_CLIENT_ID=${{ inputs.ARM_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ inputs.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ inputs.ARM_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ inputs.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
        fi
        
        echo "✅ Environment variables set"
