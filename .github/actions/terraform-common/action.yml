name: Pre-Terraform Routine
description: "Shared routines frequently executed as preliminary steps in most Terraform operation workflows."

inputs:
  core_repo:
    description: 'Full Name of the organization/repository where the terraform modules are defined'
    required: true
  config_repo:
    description: 'Full Name of the organization/repository where the terraform variables are defined'
    required: true
  fetch_depth:
    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'
    default: 2
    type: number
  target_branch:
    description: 'Name of the branch that has terraform root module configuration'
    required: true
    default: 'main'
  variables_branch:
    description: 'Name of the branch that has terraform variables configuration'
    required: false
    default: 'main'
  environment:
    description: 'Variables file to select based on the type of environment'
    required: true
  pat-token:
    description: "Github Personal Access Token"
    required: true

runs:
  using: composite
  steps:
    - name: Set Branch Variables
      shell: bash
      run: |
        echo "🔍 Repository branches:"
        echo "  Core repository branch: ${{ inputs.target_branch }}"
        echo "  Variables repository branch: ${{ inputs.variables_branch || inputs.target_branch }}"
        echo "  Environment: ${{ inputs.environment }}"

    - name: Checkout Terraform Configs
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.core_repo }}
        token: ${{ inputs.pat-token }}
        path: terraform-configs
        ref: ${{ inputs.target_branch }}
        fetch-depth: ${{ inputs.fetch_depth }}

    - name: Checkout Terraform Variables
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.config_repo }} 
        token: ${{ inputs.pat-token }}
        path: terraform-vars
        ref: ${{ inputs.variables_branch || inputs.target_branch }}
        fetch-depth: ${{ inputs.fetch_depth }}

    - name: Set Terraform Variable file path
      shell: bash
      run: |
        echo "Environment: ${{ inputs.environment }}"
        
        # Check for different possible file locations and extensions
        POSSIBLE_FILES=(
          "./terraform-vars/environments/${{ inputs.environment }}.tfvars.json"
          "./terraform-vars/environments/${{ inputs.environment }}.tfvars"
          "./terraform-vars/${{ inputs.environment }}.tfvars.json"
          "./terraform-vars/${{ inputs.environment }}.tfvars"
        )
        
        FOUND_FILE=""
        for file in "${POSSIBLE_FILES[@]}"; do
          if [ -f "$file" ]; then
            FOUND_FILE="$file"
            echo "✅ Found variables file: $file"
            break
          fi
        done
        
        if [ -z "$FOUND_FILE" ]; then
          echo "❌ No terraform variables file found for environment: ${{ inputs.environment }}"
          echo "Searched in:"
          for file in "${POSSIBLE_FILES[@]}"; do
            echo "  - $file"
          done
          echo ""
          echo "📂 Available files in terraform-vars:"
          find ./terraform-vars -name "*.tfvars*" -type f || echo "No .tfvars files found"
          exit 1
        fi
        
        # Set environment variables based on found file
        if [[ "$FOUND_FILE" == *.tfvars.json ]]; then
          echo "VARFILE_RELPATH=${FOUND_FILE#./terraform-vars/}" >> $GITHUB_ENV
          echo "VARFILE_EXTENSION=.tfvars.json" >> $GITHUB_ENV
        else
          echo "VARFILE_RELPATH=${FOUND_FILE#./terraform-vars/}" >> $GITHUB_ENV
          echo "VARFILE_EXTENSION=.tfvars" >> $GITHUB_ENV
        fi
        
    - name: Verify and Copy Terraform Variables File
      shell: bash
      run: |
        echo "🔍 Checking for terraform variables file..."
        
        SOURCE_FILE="./terraform-vars/${{ env.VARFILE_RELPATH }}"
        
        if [ -f "$SOURCE_FILE" ]; then
          echo "✅ Found: $SOURCE_FILE"
          
          # Copy with appropriate extension to terraform-configs directory
          if [ "${{ env.VARFILE_EXTENSION }}" = ".tfvars.json" ]; then
            TARGET_FILE="./terraform-configs/${{ inputs.environment }}.auto.tfvars.json"
            cp -p "$SOURCE_FILE" "$TARGET_FILE"
            echo "📋 Copied as: $TARGET_FILE"
          else
            TARGET_FILE="./terraform-configs/${{ inputs.environment }}.auto.tfvars"
            cp -p "$SOURCE_FILE" "$TARGET_FILE"
            echo "📋 Copied as: $TARGET_FILE"
          fi
          
          # Verify the copy was successful
          if [ -f "$TARGET_FILE" ]; then
            echo "✅ File successfully copied to terraform-configs directory"
            echo "📄 File content preview:"
            head -5 "$TARGET_FILE" || true
          else
            echo "❌ Failed to copy file to terraform-configs directory"
            exit 1
          fi
          
        else
          echo "❌ File not found: $SOURCE_FILE"
          echo "📂 Available files in ./terraform-vars/:"
          find ./terraform-vars -name "*.tfvars*" -type f || echo "No .tfvars files found"
          exit 1
        fi

    # Rest of your existing steps...
    - name: Find and move values.yml files
      shell: bash
      run: |
        echo "🔍 Searching for values.yaml or values.yml files..."
        found_files=$(find ./terraform-vars -type f -regex '.*values\.ya?ml' 2>/dev/null || true)

        if [ -n "$found_files" ]; then
          for file in $found_files; do
            echo "📁 Moving $file to terraform-configs/..."
            mv "$file" ./terraform-configs/
          done
        else
          echo "ℹ️  No values.yaml/yml files found. Skipping move."
        fi

    - name: Find and move Backend configuration files
      shell: bash
      run: |
        echo "🔍 Searching for .backend or .tfbackend files..."
        found_files=$(find ./terraform-vars -type f -regex '.*[^.]+\.\(tfbackend\|backend\)' 2>/dev/null || true)
        
        if [ -n "$found_files" ]; then
          for file in $found_files; do
            echo "🔐 Processing backend file: $file"
            # Check if file is base64 encoded
            if base64 -d "$file" &>/dev/null; then
              echo "📄 Decoding base64 backend file..."
              base64 -d "$file" > "./terraform-configs/config.${{ inputs.environment }}.tfbackend"
            else
              echo "📄 Copying plain backend file..."
              cp "$file" "./terraform-configs/config.${{ inputs.environment }}.tfbackend"
            fi
          done
        else
          echo "ℹ️  No backend configuration files found. Using local backend."
        fi
        
    - name: Find and move Terraform template files
      shell: bash
      run: |
        echo "🔍 Searching for .tftpl or .tpl files..."
        found_files=$(find ./terraform-vars -type f -regex '.*values\.t[^/]*pl' 2>/dev/null || true)

        if [ -n "$found_files" ]; then
          for file in $found_files; do
            echo "📁 Moving template file: $file"
            mv "$file" ./terraform-configs/
          done
        else
          echo "ℹ️  No template files found. Skipping move."
        fi

    - name: Debug - List terraform-configs directory
      shell: bash
      run: |
        echo "📂 Contents of terraform-configs directory:"
        ls -la ./terraform-configs/
        echo ""
        echo "🔍 Terraform variable files:"
        ls -la ./terraform-configs/*.tfvars* 2>/dev/null || echo "No .tfvars files found"
        echo ""
        echo "🔍 All files in terraform-configs:"
        find ./terraform-configs -type f | head -20
        echo ""
        echo "🎯 Branch Information:"
        echo "  Core repo (terraform-configs): ${{ inputs.target_branch }}"
        echo "  Variables repo (terraform-vars): ${{ inputs.variables_branch || inputs.target_branch }}"
