name: Pre-Terraform Routine for Auth
description: "Shared routines used for authenticating to certain providers, modules or backends"

inputs:
  ARM_CLIENT_ID:
    description: "Azure Client ID for service principal"
  ARM_CLIENT_SECRET:
    description: "Azure Client Secret for service principal"
  ARM_TENANT_ID:
    description: "Azure Tenant ID"
  ARM_SUBSCRIPTION_ID:
    description: "Azure Subscription ID"
  hcp__api-token:
    description: "The API token for HashiCorp Cloud Platform (HCP) Terraform, granting access to team-level operations."
  hcp__tf-version:
    description: "The specific Terraform version to install and use during the job execution."
    default: '1.11.3'
    
runs:
  using: composite
  steps:
    - name: Configure AWS Credentials (OIDC)
      if: ${{ inputs.aws__oidc-arn != '' && inputs.aws__region != '' }}
      uses: aws-actions/configure-aws-credentials@v3
      with:
        role-to-assume: ${{ inputs.aws__oidc-arn }}
        aws-region: ${{ inputs.aws__region }}

    - name: Configure AWS credentials (Static IAM)
      if: ${{ inputs.aws__secret-access-key != '' && inputs.aws__access-key-id != '' }}
      uses: aws-actions/configure-aws-credentials@v3
      with:
        aws-access-key-id: ${{ inputs.aws__access-key-id }}
        aws-secret-access-key: ${{ inputs.aws__secret-access-key }}
        aws-region: ${{ inputs.aws__region }}
        
    - name: Setup Terraform with HCP Remote Cloud
      if: ${{ inputs.hcp__api-token != ''}}
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.hcp__tf-version }}
        cli_config_credentials_token: ${{ inputs.hcp__api-token }}

    - name: Setup Terraform locally
      if: ${{ inputs.hcp__api-token == ''}}
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ inputs.hcp__tf-version }}

      - name: Set Azure Environment Variables
      if: ${{ inputs.ARM_CLIENT_ID != '' && inputs.ARM_CLIENT_SECRET != '' && inputs.ARM_TENANT_ID != '' && inputs.ARM_SUBSCRIPTION_ID != '' }}
      shell: bash
      run: |
        echo "ARM_CLIENT_ID=${{ inputs.ARM_CLIENT_ID }}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET=${{ inputs.ARM_CLIENT_SECRET }}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=${{ inputs.ARM_TENANT_ID }}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=${{ inputs.ARM_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
    
