name: Pre-Terraform Routine
description: "Shared routines frequently executed as preliminary steps in most Terraform operation workflows."

inputs:
  core_repo:
    description: 'Full Name of the organization/repository where the terraform modules are defined'
    required: true
  config_repo:
    description: 'Full Name of the organization/repository where the terraform variables are defined'
    required: true
  fetch_depth:
    description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'
    default: 2
    type: number
  target_branch:
    description: 'Name of the branch that has terraform root module configuration'
    required: true
    default: 'main'
  variables_branch:
    description: 'Name of the branch that has terraform variables configuration'
    required: false
    default: 'main'
  environment:
    description: 'Variables file to select based on the type of environment'
    required: true
  pat-token:
    description: "Github Personal Access Token"
    required: true

runs:
  using: composite
  steps:
    - name: Set Branch Variables
      shell: bash
      run: |
        echo "🔍 Repository branches:"
        echo "  Core repository branch: ${{ inputs.target_branch }}"
        echo "  Variables repository branch: ${{ inputs.variables_branch || inputs.target_branch }}"
        echo "  Environment: ${{ inputs.environment }}"

    - name: Checkout Terraform Configs
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.core_repo }}
        token: ${{ inputs.pat-token }}
        path: terraform-configs
        ref: ${{ inputs.target_branch }}
        fetch-depth: ${{ inputs.fetch_depth }}

    - name: Checkout Terraform Variables
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.config_repo }} 
        token: ${{ inputs.pat-token }}
        path: terraform-vars
        ref: ${{ inputs.variables_branch || inputs.target_branch }}
        fetch-depth: ${{ inputs.fetch_depth }}

    - name: Set Terraform Variable file path
      shell: bash
      run: |
        echo "Environment: ${{ inputs.environment }}"
        # Try .tfvars.json first, then .tfvars
        if [ -f "./terraform-vars/environments/${{ inputs.environment }}.tfvars.json" ]; then
          echo "VARFILE_RELPATH=environments/${{ inputs.environment }}.tfvars.json" >> $GITHUB_ENV
          echo "VARFILE_EXTENSION=.tfvars.json" >> $GITHUB_ENV
          echo "✅ Found variables file: ./terraform-vars/environments/${{ inputs.environment }}.tfvars.json"
        elif [ -f "./terraform-vars/environments/${{ inputs.environment }}.tfvars" ]; then
          echo "VARFILE_RELPATH=environments/${{ inputs.environment }}.tfvars" >> $GITHUB_ENV
          echo "VARFILE_EXTENSION=.tfvars" >> $GITHUB_ENV
          echo "✅ Found variables file: ./terraform-vars/environments/${{ inputs.environment }}.tfvars"
        else
          echo "❌ No terraform variables file found for environment: ${{ inputs.environment }}"
          echo "Expected: environments/${{ inputs.environment }}.tfvars.json or environments/${{ inputs.environment }}.tfvars"
          echo "📂 Available files in terraform-vars/environments/:"
          ls -la ./terraform-vars/environments/ 2>/dev/null || echo "Directory not found"
          echo "📂 All .tfvars files in terraform-vars:"
          find ./terraform-vars -name "*.tfvars*" -type f 2>/dev/null || echo "No .tfvars files found"
          exit 1
        fi
        
    - name: Verify and Copy Terraform Variables File
      shell: bash
      run: |
        echo "🔍 Checking for terraform variables file..."
        
        # Check if the file exists and copy it
        if [ -f "./terraform-vars/${{ env.VARFILE_RELPATH }}" ]; then
          echo "✅ Found: ./terraform-vars/${{ env.VARFILE_RELPATH }}"
          
          # Copy with appropriate extension
          if [ "${{ env.VARFILE_EXTENSION }}" = ".tfvars.json" ]; then
            cp -p ./terraform-vars/${{ env.VARFILE_RELPATH }} ./terraform-configs/${{ inputs.environment }}.auto.tfvars.json
            echo "📋 Copied as: ${{ inputs.environment }}.auto.tfvars.json"
          else
            cp -p ./terraform-vars/${{ env.VARFILE_RELPATH }} ./terraform-configs/${{ inputs.environment }}.auto.tfvars
            echo "📋 Copied as: ${{ inputs.environment }}.auto.tfvars"
          fi
          
          # Show first few lines for verification
          echo "📄 File content preview:"
          if [ "${{ env.VARFILE_EXTENSION }}" = ".tfvars.json" ]; then
            head -5 ./terraform-configs/${{ inputs.environment }}.auto.tfvars.json || true
          else
            head -5 ./terraform-configs/${{ inputs.environment }}.auto.tfvars || true
          fi
        else
          echo "❌ File not found: ./terraform-vars/${{ env.VARFILE_RELPATH }}"
          echo "📂 Available files in ./terraform-vars/environments/:"
          ls -la ./terraform-vars/environments/ || echo "Directory not found"
          exit 1
        fi

    - name: Find and move values.yml files
      shell: bash
      run: |
        echo "🔍 Searching for values.yaml or values.yml files..."
        echo "📂 Looking in terraform-vars directory structure:"
        find ./terraform-vars -type f -name "values.ya*ml" 2>/dev/null || echo "No values.yaml/yml files found"
        
        found_files=$(find ./terraform-vars -type f -name "values.ya*ml" 2>/dev/null || true)

        if [ -n "$found_files" ]; then
          echo "✅ Found values files:"
          echo "$found_files"
          for file in $found_files; do
            filename=$(basename "$file")
            echo "📁 Moving $file to terraform-configs/$filename..."
            cp "$file" "./terraform-configs/$filename"
          done
        else
          echo "ℹ️  No values.yaml/yml files found. Skipping move."
        fi

    - name: Find and move Backend configuration files
      shell: bash
      run: |
        echo "🔍 Searching for .backend or .tfbackend files..."
        echo "📂 Looking in terraform-vars directory:"
        find ./terraform-vars -type f \( -name "*.tfbackend" -o -name "*.backend" \) 2>/dev/null || echo "No backend files found"
        
        found_files=$(find ./terraform-vars -type f \( -name "*.tfbackend" -o -name "*.backend" \) 2>/dev/null || true)
        
        if [ -n "$found_files" ]; then
          echo "✅ Found backend files:"
          echo "$found_files"
          for file in $found_files; do
            echo "🔐 Processing backend file: $file"
            filename=$(basename "$file")
            # Check if file is base64 encoded
            if base64 -d "$file" &>/dev/null 2>&1; then
              echo "📄 Decoding base64 backend file..."
              base64 -d "$file" > "./terraform-configs/config.${{ inputs.environment }}.tfbackend"
            else
              echo "📄 Copying plain backend file..."
              cp "$file" "./terraform-configs/config.${{ inputs.environment }}.tfbackend"
            fi
          done
        else
          echo "ℹ️  No backend configuration files found. Using local backend."
        fi
        
    - name: Find and move Terraform template files
      shell: bash
      run: |
        echo "🔍 Searching for .tftpl template files..."
        echo "📂 Looking in terraform-vars directory structure:"
        find ./terraform-vars -type f -name "*.tftpl" 2>/dev/null || echo "No .tftpl files found"
        
        found_files=$(find ./terraform-vars -type f -name "*.tftpl" 2>/dev/null || true)

        if [ -n "$found_files" ]; then
          echo "✅ Found template files:"
          echo "$found_files"
          for file in $found_files; do
            filename=$(basename "$file")
            echo "📁 Moving template file: $file -> ./terraform-configs/$filename"
            cp "$file" "./terraform-configs/$filename"
          done
        else
          echo "ℹ️  No .tftpl template files found. Skipping move."
        fi

    - name: Copy ArgoCD Manifests Directory
      shell: bash
      run: |
        echo "🔍 Searching for ArgoCD manifests directory..."
        
        if [ -d "./terraform-vars/manifests" ]; then
          echo "✅ Found manifests directory: ./terraform-vars/manifests"
          echo "📁 Copying entire manifests directory to terraform-configs..."
          
          # Copy the entire manifests directory
          cp -r ./terraform-vars/manifests ./terraform-configs/
          
          echo "📂 Manifests directory structure after copy:"
          find ./terraform-configs/manifests -type f 2>/dev/null | head -20 || echo "No files found in manifests"
          
          echo "📂 ArgoCD configs specifically:"
          if [ -d "./terraform-configs/manifests/argocd-configs" ]; then
            ls -la ./terraform-configs/manifests/argocd-configs/
            echo ""
            echo "📋 ArgoCD config files:"
            find ./terraform-configs/manifests/argocd-configs -name "*.yaml" -type f 2>/dev/null || echo "No YAML files found"
          else
            echo "❌ ArgoCD configs directory not found after copy"
          fi
          
        else
          echo "ℹ️  No manifests directory found. Skipping ArgoCD manifests copy."
          echo "📂 Available directories in terraform-vars:"
          ls -la ./terraform-vars/ | grep ^d || echo "No directories found"
        fi

    - name: Copy Scripts Directory
      shell: bash
      run: |
        echo "🔍 Searching for scripts directory..."
        
        if [ -d "./terraform-vars/scripts" ]; then
          echo "✅ Found scripts directory: ./terraform-vars/scripts"
          echo "📁 Copying entire scripts directory to terraform-configs..."
          
          # Copy the entire scripts directory
          cp -r ./terraform-vars/scripts ./terraform-configs/
          
          echo "📂 Scripts directory structure after copy:"
          find ./terraform-configs/scripts -type f 2>/dev/null | head -10 || echo "No files found in scripts"
          
        else
          echo "ℹ️  No scripts directory found. Skipping scripts copy."
        fi

    - name: Copy Requirements File
      shell: bash
      run: |
        echo "🔍 Searching for requirements.txt..."
        
        if [ -f "./terraform-vars/requirements.txt" ]; then
          echo "✅ Found requirements.txt: ./terraform-vars/requirements.txt"
          echo "📁 Copying requirements.txt to terraform-configs..."
          
          cp ./terraform-vars/requirements.txt ./terraform-configs/
          
          echo "📄 Requirements.txt content:"
          head -10 ./terraform-configs/requirements.txt || true
          
        else
          echo "ℹ️  No requirements.txt found. Skipping requirements copy."
        fi

    - name: Debug - List terraform-configs directory
      shell: bash
      run: |
        echo "📂 Contents of terraform-configs directory:"
        ls -la ./terraform-configs/
        echo ""
        echo "🔍 Terraform variable files:"
        ls -la ./terraform-configs/*.tfvars* 2>/dev/null || echo "No .tfvars files found"
        echo ""
        echo "🔍 Template files:"
        ls -la ./terraform-configs/*.tftpl 2>/dev/null || echo "No .tftpl files found"
        echo ""
        echo "🔍 ArgoCD manifests:"
        if [ -d "./terraform-configs/manifests/argocd-configs" ]; then
          echo "✅ ArgoCD configs found:"
          ls -la ./terraform-configs/manifests/argocd-configs/
        else
          echo "❌ ArgoCD configs not found"
        fi
        echo ""
        echo "🔍 Scripts directory:"
        if [ -d "./terraform-configs/scripts" ]; then
          echo "✅ Scripts found:"
          ls -la ./terraform-configs/scripts/
        else
          echo "❌ Scripts not found"
        fi
        echo ""
        echo "🔍 Key terraform files:"
        find ./terraform-configs -maxdepth 1 -type f \( -name "*.tf" -o -name "*.tfvars*" -o -name "*.tftpl" \) | head -20
        echo ""
        echo "🎯 Branch Information:"
        echo "  Core repo (terraform-configs): ${{ inputs.target_branch }}"
        echo "  Variables repo (terraform-vars): ${{ inputs.variables_branch || inputs.target_branch }}"
