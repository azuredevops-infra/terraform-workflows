name: Terraform Plan and Apply (Azure)

on:
  repository_dispatch:
    types: [tfvars-changed]
    
  workflow_dispatch:
    inputs:
      target_branch:
        description: 'Branch name from the Terraform core repository'
        required: true
        type: string
        default: 'main'
      variables_branch:
        description: 'Branch name from the Terraform variables repository'
        required: true
        type: string
        default: 'main'
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options: 
          - dev
          - staging
          - prod
        default: 'dev'
      enable_genesis_gateway:
        description: 'Enable Application Gateway for Genesis frontend'
        required: false
        type: boolean
        default: true
      enable_grafana_gateway:
        description: 'Enable Application Gateway routing for Grafana'
        required: false
        type: boolean
        default: true
      apply_changes:
        description: 'Apply changes after successful plan'
        required: false
        type: boolean
        default: false

permissions:
  id-token: write
  contents: read
  pull-requests: write
      
jobs:  
  terraform:
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.event.client_payload.environment }}
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'repository_dispatch' &&
       github.event.client_payload.tf-lifecycle == 'plan-apply')
    defaults:
      run:
        working-directory: .
    env:
      TF_WORKING_DIR: 'terraform-configs' 
      TARGET_BRANCH: ${{ github.event_name == 'workflow_dispatch' && inputs.target_branch || github.event.client_payload.target_branch }}
      VARIABLES_BRANCH: ${{ github.event_name == 'workflow_dispatch' && inputs.variables_branch || github.event.client_payload.variables_branch || github.event.client_payload.target_branch || 'main' }}
      ENVIRONMENT: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.event.client_payload.environment }}
      AZURE_KEYVAULT_URL: ${{ vars.AZURE_KEYVAULT_URL }}

    outputs: 
      cluster_name: ${{ steps.finalizer.outputs.cluster_name }}
      resource_group: ${{ steps.finalizer.outputs.resource_group }}
      application_gateway_ip: ${{ steps.finalizer.outputs.application_gateway_ip }}
      genesis_fqdn: ${{ steps.finalizer.outputs.genesis_fqdn }}
      grafana_fqdn: ${{ steps.finalizer.outputs.grafana_fqdn }}
      grafana_url: ${{ steps.finalizer.outputs.grafana_url }}

    steps: 
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install kubectl
        uses: azure/setup-kubectl@v4
        with:
           version: 'v1.32.0'
          
      - name: Run Common Terraform Routines
        id: tf-routines
        uses: ./.github/actions/terraform-common
        with:
          core_repo: ${{ vars.TF_CORE_REPO }}
          config_repo: ${{ vars.TF_CONFIG_REPO }}
          target_branch: ${{ env.TARGET_BRANCH }}
          variables_branch: ${{ env.VARIABLES_BRANCH }}
          environment: ${{ env.ENVIRONMENT }}
          pat-token: ${{ secrets.GH_PAT }}
      
      - name: Run Terraform Auth Routine
        uses: ./.github/actions/terraform-auth
        with:
          ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
          terraform__version: '1.6.6'

      - name: Setup Genesis Secrets
        if: ${{ inputs.enable_genesis_gateway == true }}
        run: |
          echo "GENESIS_PAT_TOKEN=${{ secrets.GENESIS_PAT_TOKEN }}" >> $GITHUB_ENV
          echo "GENESIS_USER_ID=Harman-DTS" >> $GITHUB_ENV

      - name: Generate Cache key hash
        id: target-dir-hash
        run: |
          echo "hash_value=${{ hashFiles(format('{0}/*.tf', env.TF_WORKING_DIR)) }}" >> $GITHUB_OUTPUT

      - name: Restore Terraform cache
        id: restore-cache
        uses: actions/cache@v4
        with:
          key: ${{ runner.os }}-terraform-${{ env.TARGET_BRANCH }}-${{ steps.target-dir-hash.outputs.hash_value }}
          restore-keys: |
            ${{ runner.os }}-terraform-${{ env.TARGET_BRANCH  }}-
            ${{ runner.os }}-terraform-
          path: |
            ${{ env.TF_WORKING_DIR }}/.terraform.lock.hcl
            ${{ env.TF_WORKING_DIR }}/.terraform/

      # Local backend - no backend config file needed
      - name: Terraform Init (Local Backend)
        if: steps.restore-cache.outputs.cache-hit != 'true'
        run: terraform init -input=false
        working-directory: ${{ env.TF_WORKING_DIR }}
        
      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ env.TF_WORKING_DIR }}

      # üÜï NEW: Dynamic Resource Discovery and Auto-Import
      - name: Dynamic Resource Discovery and Auto-Import
        run: |
          echo "üîç Discovering and importing existing Azure resources..."
          
          # Define the resource group name based on environment
          RG_NAME="${{ env.ENVIRONMENT == 'dev' && 'oorja-dev-rg' || format('oorja-{0}-rg', env.ENVIRONMENT) }}"
          
          echo "üìã Scanning resource group: $RG_NAME"
          
          # Function to safely import resources
          safe_import() {
            local terraform_address=$1
            local azure_resource_id=$2
            local resource_name=$3
            
            echo "üîç Checking: $resource_name"
            
            # Check if resource exists in Azure
            if az resource show --ids "$azure_resource_id" &>/dev/null; then
              echo "‚úÖ Found existing: $resource_name"
              
              # Check if already in terraform state
              if ! terraform state show "$terraform_address" &>/dev/null; then
                echo "üì• Importing: $terraform_address"
                if terraform import "$terraform_address" "$azure_resource_id"; then
                  echo "‚úÖ Successfully imported: $resource_name"
                else
                  echo "‚ö†Ô∏è Import failed for: $resource_name (continuing...)"
                fi
              else
                echo "‚ÑπÔ∏è Already in state: $resource_name"
              fi
            else
              echo "‚ùå Not found: $resource_name (will be created)"
            fi
          }
          
          # Import Resource Group first
          safe_import "azurerm_resource_group.this" \
            "/subscriptions/$ARM_SUBSCRIPTION_ID/resourceGroups/$RG_NAME" \
            "Resource Group"
          
          # Get all resources in the resource group
          echo "üîç Discovering all resources in $RG_NAME..."
          EXISTING_RESOURCES=$(az resource list --resource-group "$RG_NAME" --query "[].{name:name,type:type,id:id}" -o json 2>/dev/null || echo "[]")
          RESOURCE_COUNT=$(echo "$EXISTING_RESOURCES" | jq length)
          
          echo "üìä Found $RESOURCE_COUNT existing resources"
          
          if [ "$RESOURCE_COUNT" -gt 0 ]; then
            echo "üìù Resource inventory:"
            echo "$EXISTING_RESOURCES" | jq -r '.[] | "  - \(.name) (\(.type))"'
            echo ""
          fi
          
          # Import AKS Clusters
          echo "üîç Looking for AKS clusters..."
          echo "$EXISTING_RESOURCES" | jq -r '.[] | select(.type=="Microsoft.ContainerService/managedClusters") | .id' | while read -r aks_id; do
            if [ -n "$aks_id" ]; then
              aks_name=$(echo "$aks_id" | sed 's|.*/||')
              safe_import "module.aks.azurerm_kubernetes_cluster.this" "$aks_id" "AKS Cluster ($aks_name)"
            fi
          done
          
          # Import Container Registries
          echo "üîç Looking for Container Registries..."
          echo "$EXISTING_RESOURCES" | jq -r '.[] | select(.type=="Microsoft.ContainerRegistry/registries") | .id' | while read -r acr_id; do
            if [ -n "$acr_id" ]; then
              acr_name=$(echo "$acr_id" | sed 's|.*/||')
              safe_import "module.acr.azurerm_container_registry.this" "$acr_id" "Container Registry ($acr_name)"
            fi
          done
          
          # Import Key Vaults
          echo "üîç Looking for Key Vaults..."
          echo "$EXISTING_RESOURCES" | jq -r '.[] | select(.type=="Microsoft.KeyVault/vaults") | .id' | while read -r kv_id; do
            if [ -n "$kv_id" ]; then
              kv_name=$(echo "$kv_id" | sed 's|.*/||')
              safe_import "module.key_vault.azurerm_key_vault.this" "$kv_id" "Key Vault ($kv_name)"
            fi
          done
          
          # Import Storage Accounts
          echo "üîç Looking for Storage Accounts..."
          echo "$EXISTING_RESOURCES" | jq -r '.[] | select(.type=="Microsoft.Storage/storageAccounts") | .id' | while read -r sa_id; do
            if [ -n "$sa_id" ]; then
              sa_name=$(echo "$sa_id" | sed 's|.*/||')
              safe_import "module.storage.azurerm_storage_account.this" "$sa_id" "Storage Account ($sa_name)"
            fi
          done
          
          # Import Application Gateways
          echo "üîç Looking for Application Gateways..."
          echo "$EXISTING_RESOURCES" | jq -r '.[] | select(.type=="Microsoft.Network/applicationGateways") | .id' | while read -r agw_id; do
            if [ -n "$agw_id" ]; then
              agw_name=$(echo "$agw_id" | sed 's|.*/||')
              safe_import "module.app_gateway[0].azurerm_application_gateway.this" "$agw_id" "Application Gateway ($agw_name)"
            fi
          done
          
          # Import Virtual Networks
          echo "üîç Looking for Virtual Networks..."
          echo "$EXISTING_RESOURCES" | jq -r '.[] | select(.type=="Microsoft.Network/virtualNetworks") | .id' | while read -r vnet_id; do
            if [ -n "$vnet_id" ]; then
              vnet_name=$(echo "$vnet_id" | sed 's|.*/||')
              safe_import "module.network.azurerm_virtual_network.this" "$vnet_id" "Virtual Network ($vnet_name)"
            fi
          done
          
          # Import Log Analytics Workspaces
          echo "üîç Looking for Log Analytics Workspaces..."
          echo "$EXISTING_RESOURCES" | jq -r '.[] | select(.type=="Microsoft.OperationalInsights/workspaces") | .id' | while read -r law_id; do
            if [ -n "$law_id" ]; then
              law_name=$(echo "$law_id" | sed 's|.*/||')
              safe_import "module.monitoring.azurerm_log_analytics_workspace.this" "$law_id" "Log Analytics Workspace ($law_name)"
            fi
          done
          
          echo ""
          echo "‚úÖ Resource discovery and import completed!"
          echo "üìä Summary: Processed $RESOURCE_COUNT existing resources"
          echo "üéØ Next: Terraform plan will show only NEW resources to be created"
          echo ""
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Debug Files Before Plan
        run: |
          echo "üîç Pre-plan debug information:"
          echo "Working directory: $(pwd)"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo ""
          echo "üìÇ All files in current directory:"
          ls -la
          echo ""
          echo "üîç Looking for tfvars files:"
          find . -name "*tfvars*" -type f 2>/dev/null || echo "No tfvars files found"
          echo ""
          echo "üéØ Specifically looking for:"
          echo "  - ${{ env.ENVIRONMENT }}.auto.tfvars"
          echo "  - ${{ env.ENVIRONMENT }}.auto.tfvars.json" 
          echo "  - ${{ env.ENVIRONMENT }}.tfvars"
          
          for file in "${{ env.ENVIRONMENT }}.auto.tfvars" "${{ env.ENVIRONMENT }}.auto.tfvars.json" "${{ env.ENVIRONMENT }}.tfvars"; do
            if [ -f "$file" ]; then
              echo "‚úÖ Found: $file"
              echo "üìÑ File size: $(wc -c < "$file") bytes"
            else
              echo "‚ùå Missing: $file"
            fi
          done
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Plan
        id: plan
        run: |
          echo "üîç Running Terraform Plan..."
          echo "Working directory: $(pwd)"
          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo ""
          
          # Check for different possible tfvars files in order of preference
          TFVARS_FILE=""
          
          if [ -f "${{ env.ENVIRONMENT }}.auto.tfvars.json" ]; then
            TFVARS_FILE="${{ env.ENVIRONMENT }}.auto.tfvars.json"
            echo "‚úÖ Using JSON variables file: $TFVARS_FILE"
          elif [ -f "${{ env.ENVIRONMENT }}.auto.tfvars" ]; then
            TFVARS_FILE="${{ env.ENVIRONMENT }}.auto.tfvars"
            echo "‚úÖ Using auto variables file: $TFVARS_FILE"
          elif [ -f "${{ env.ENVIRONMENT }}.tfvars" ]; then
            TFVARS_FILE="${{ env.ENVIRONMENT }}.tfvars"
            echo "‚úÖ Using standard variables file: $TFVARS_FILE"
          else
            echo "‚ùå No variables file found for environment: ${{ env.ENVIRONMENT }}"
            echo "üìÇ Available files:"
            ls -la *.tfvars* 2>/dev/null || echo "No .tfvars files found"
            echo "üìÇ All files:"
            ls -la
            exit 1
          fi
          
          echo "üìÑ Variables file preview:"
          head -5 "$TFVARS_FILE"
          echo ""
          
          echo "üöÄ Running terraform plan with file: $TFVARS_FILE"
          terraform plan -input=false -var-file="$TFVARS_FILE" -out=tfplan
          
          echo "üìã Generating plan output..."
          terraform show -no-color tfplan > tfplan.txt
          echo "‚úÖ Terraform plan completed successfully"
          echo ""
          echo "üìä Plan Summary:"
          grep -E "(Plan:|No changes)" tfplan.txt || echo "Plan generated"
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Upload Plan Output
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ env.ENVIRONMENT }}
          path: |
            ${{ env.TF_WORKING_DIR }}/tfplan
            ${{ env.TF_WORKING_DIR }}/tfplan.txt
          retention-days: 30

      - name: Comment PR with Plan
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const planOutput = fs.readFileSync('${{ env.TF_WORKING_DIR }}/tfplan.txt', 'utf8');
            
            const comment = `## üèóÔ∏è Terraform Plan Results for ${{ env.ENVIRONMENT }}
            
            ### Core Branch: ${{ env.TARGET_BRANCH }}
            ### Variables Branch: ${{ env.VARIABLES_BRANCH }}
            ### Genesis Gateway: ${{ inputs.enable_genesis_gateway }}
            ### Grafana Gateway: ${{ inputs.enable_grafana_gateway }}
            
            <details>
            <summary>üìã Show Plan Details</summary>
            
            \`\`\`hcl
            ${planOutput}
            \`\`\`
            
            </details>
            
            ${planOutput.includes('Plan:') ? '‚úÖ Plan generated successfully' : '‚ö†Ô∏è No changes detected'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Terraform Apply
        if: >
          (github.event_name == 'workflow_dispatch' && inputs.apply_changes == true) ||
          (github.event_name == 'repository_dispatch' && 
           github.event.client_payload.tf-lifecycle == 'plan-apply' && 
           github.event.client_payload.event_name != 'pull_request_target') ||
          (github.ref == 'refs/heads/main' && github.event_name == 'push')
        run: |
          echo "üöÄ Applying Terraform changes..."
          terraform apply -auto-approve tfplan
        working-directory: ${{ env.TF_WORKING_DIR }}

      - name: Terraform Post-Apply Finalizations
        if: >
          (github.event_name == 'workflow_dispatch' && inputs.apply_changes == true) ||
          (github.event_name == 'repository_dispatch' && 
           github.event.client_payload.tf-lifecycle == 'plan-apply' && 
           github.event.client_payload.event_name != 'pull_request_target') ||
          (github.ref == 'refs/heads/main' && github.event_name == 'push')
        id: finalizer
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "üìä Extracting Terraform outputs..."
          
          # Get cluster credentials if AKS exists
          if terraform output cluster_name &>/dev/null; then
            CLUSTER_NAME=$(terraform output -raw cluster_name)
            RESOURCE_GROUP=$(terraform output -raw resource_group_name)
            
            echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT
            echo "resource_group=$RESOURCE_GROUP" >> $GITHUB_OUTPUT
            
            # Update kubeconfig
            az aks get-credentials --resource-group $RESOURCE_GROUP --name $CLUSTER_NAME --overwrite-existing
            echo "‚úÖ Kubeconfig updated for cluster: $CLUSTER_NAME"
          fi
          
          # Get Application Gateway info if enabled
          if [[ "${{ inputs.enable_genesis_gateway }}" == "true" ]] && terraform output application_gateway_public_ip &>/dev/null; then
            APP_GW_IP=$(terraform output -raw application_gateway_public_ip)
            GENESIS_FQDN="genesis-azure.d01.hdcss.com"
            echo "application_gateway_ip=$APP_GW_IP" >> $GITHUB_OUTPUT
            echo "genesis_fqdn=$GENESIS_FQDN" >> $GITHUB_OUTPUT
            echo "üåê Application Gateway IP: $APP_GW_IP"
            echo "üéØ Genesis FQDN: $GENESIS_FQDN"
          fi
          
          # Get Grafana information
          if terraform output grafana_url &>/dev/null; then
            GRAFANA_URL=$(terraform output -raw grafana_url)
            GRAFANA_FQDN="grafana.genesis-azure.d01.hdcss.com"
            echo "grafana_url=$GRAFANA_URL" >> $GITHUB_OUTPUT
            echo "grafana_fqdn=$GRAFANA_FQDN" >> $GITHUB_OUTPUT
            echo "üìä Grafana URL: $GRAFANA_URL"
            echo "üéØ Grafana Custom FQDN: $GRAFANA_FQDN"
          fi

  grafana-configuration:
    needs: terraform
    name: Grafana Dashboard Configuration
    if: >
      inputs.enable_grafana_gateway == true &&
      ((github.event_name == 'workflow_dispatch' && inputs.apply_changes == true) ||
       (github.event_name == 'repository_dispatch' && 
        github.event.client_payload.tf-lifecycle == 'plan-apply' && 
        github.event.client_payload.event_name != 'pull_request_target') ||
       (github.ref == 'refs/heads/main' && github.event_name == 'push'))
    runs-on: ubuntu-latest
    environment: ${{ github.event_name == 'workflow_dispatch' && inputs.environment || github.event.client_payload.environment }}
    env:
      CLUSTER_NAME: ${{ needs.terraform.outputs.cluster_name }}
      RESOURCE_GROUP: ${{ needs.terraform.outputs.resource_group }}
      GRAFANA_URL: ${{ needs.terraform.outputs.grafana_url }}
      GRAFANA_FQDN: ${{ needs.terraform.outputs.grafana_fqdn }}
      APP_GATEWAY_IP: ${{ needs.terraform.outputs.application_gateway_ip }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }

      - name: Setup kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.32.0'

      - name: Update kubeconfig
        run: |
          az aks get-credentials --resource-group ${{ env.RESOURCE_GROUP }} --name ${{ env.CLUSTER_NAME }} --overwrite-existing

      - name: Configure Grafana Datasources
        run: |
          echo "üìä Configuring Grafana datasources..."
          
          # Get Grafana workspace information
          GRAFANA_ID=$(az grafana list --resource-group ${{ env.RESOURCE_GROUP }} --query "[0].id" -o tsv)
          
          if [ -n "$GRAFANA_ID" ]; then
            echo "‚úÖ Found Grafana workspace: $GRAFANA_ID"
            
            # Configure Prometheus datasource
            echo "üîó Configuring Prometheus datasource..."
            
            # Get Prometheus service endpoint from cluster
            PROMETHEUS_URL="http://prometheus-server.observability.svc.cluster.local"
            
            # Note: Azure Managed Grafana datasource configuration
            # This would typically be done through Azure CLI or ARM templates
            echo "üì° Prometheus URL: $PROMETHEUS_URL"
            echo "üéØ Grafana will be accessible at: https://${{ env.GRAFANA_FQDN }}"
            echo "üìä Native Grafana URL: ${{ env.GRAFANA_URL }}"
            
          else
            echo "‚ö†Ô∏è Grafana workspace not found in resource group"
          fi

      - name: Verify Grafana Access
        run: |
          echo "üîç Verifying Grafana configuration..."
          
          # Check if Grafana is accessible
          if [ -n "${{ env.GRAFANA_URL }}" ]; then
            echo "‚úÖ Azure Managed Grafana deployed successfully!"
            echo ""
            echo "üéØ Access URLs:"
            echo "  üìä Native Azure Grafana: ${{ env.GRAFANA_URL }}"
            echo "  üåê Application Gateway: https://${{ env.GRAFANA_FQDN }}"
            echo "  üì° Application Gateway IP: ${{ env.APP_GATEWAY_IP }}"
            echo ""
            echo "üë§ Admin User: 299b42cc-b252-4e9e-bef2-f4c5370ebdca"
            echo ""
            echo "üîß Next Steps:"
            echo "  1. Add DNS record: ${{ env.APP_GATEWAY_IP }} ‚Üí grafana.genesis-azure.d01.hdcss.com"
            echo "  2. Configure additional datasources in Grafana UI"
            echo "  3. Import dashboards for AKS monitoring"
          else
            echo "‚ö†Ô∏è Grafana URL not available from Terraform outputs"
          fi
